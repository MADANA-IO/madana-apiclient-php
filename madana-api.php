<?php

/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 *
 */
 

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class Environment
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $description;

    /**
     * (no documentation provided)
     *
     * @var boolean
     */
    private $published;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $roothash;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $size;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\Remotecontrol\RunConfig
     */
    private $defaultRunConfiguration;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $ipfsHash;

    /**
     * (no documentation provided)
     *
     * @var string[]
     */
    private $packages;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $rootHashOffset;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $name;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $uuid;

    /**
     * (no documentation provided)
     *
     * @var string[]
     */
    private $content;

    /**
     * Constructs a Environment from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * (no documentation provided)
     *
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    /**
     * (no documentation provided)
     *
     * @return boolean
     */
    public function getPublished()
    {
        return $this->published;
    }

    /**
     * (no documentation provided)
     *
     * @param boolean $published
     */
    public function setPublished($published)
    {
        $this->published = $published;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getRoothash()
    {
        return $this->roothash;
    }

    /**
     * (no documentation provided)
     *
     * @param string $roothash
     */
    public function setRoothash($roothash)
    {
        $this->roothash = $roothash;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * (no documentation provided)
     *
     * @param string $size
     */
    public function setSize($size)
    {
        $this->size = $size;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\Remotecontrol\RunConfig
     */
    public function getDefaultRunConfiguration()
    {
        return $this->defaultRunConfiguration;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\Remotecontrol\RunConfig $defaultRunConfiguration
     */
    public function setDefaultRunConfiguration($defaultRunConfiguration)
    {
        $this->defaultRunConfiguration = $defaultRunConfiguration;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getIpfsHash()
    {
        return $this->ipfsHash;
    }

    /**
     * (no documentation provided)
     *
     * @param string $ipfsHash
     */
    public function setIpfsHash($ipfsHash)
    {
        $this->ipfsHash = $ipfsHash;
    }
    /**
     * (no documentation provided)
     *
     * @return string[]
     */
    public function getPackages()
    {
        return $this->packages;
    }

    /**
     * (no documentation provided)
     *
     * @param string[] $packages
     */
    public function setPackages($packages)
    {
        $this->packages = $packages;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getRootHashOffset()
    {
        return $this->rootHashOffset;
    }

    /**
     * (no documentation provided)
     *
     * @param string $rootHashOffset
     */
    public function setRootHashOffset($rootHashOffset)
    {
        $this->rootHashOffset = $rootHashOffset;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * (no documentation provided)
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * (no documentation provided)
     *
     * @param string $uuid
     */
    public function setUuid($uuid)
    {
        $this->uuid = $uuid;
    }
    /**
     * (no documentation provided)
     *
     * @return string[]
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * (no documentation provided)
     *
     * @param string[] $content
     */
    public function setContent($content)
    {
        $this->content = $content;
    }
    /**
     * Returns the associative array for this Environment
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->description) {
            $a["description"] = $this->description;
        }
        if ($this->published) {
            $a["published"] = $this->published;
        }
        if ($this->roothash) {
            $a["roothash"] = $this->roothash;
        }
        if ($this->size) {
            $a["size"] = $this->size;
        }
        if ($this->defaultRunConfiguration) {
            $a["defaultRunConfiguration"] = $this->defaultRunConfiguration->toArray();
        }
        if ($this->ipfsHash) {
            $a["ipfsHash"] = $this->ipfsHash;
        }
        if ($this->packages) {
            $ab = array();
            foreach ($this->packages as $i => $x) {
                $ab[$i] = $x;
            }
            $a['packages'] = $ab;
        }
        if ($this->rootHashOffset) {
            $a["rootHashOffset"] = $this->rootHashOffset;
        }
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->uuid) {
            $a["uuid"] = $this->uuid;
        }
        if ($this->content) {
            $ab = array();
            foreach ($this->content as $i => $x) {
                $ab[$i] = $x;
            }
            $a['content'] = $ab;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Environment
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Environment from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['description'])) {
            $this->description = $o["description"];
        }
        if (isset($o['published'])) {
            $this->published = $o["published"];
        }
        if (isset($o['roothash'])) {
            $this->roothash = $o["roothash"];
        }
        if (isset($o['size'])) {
            $this->size = $o["size"];
        }
        if (isset($o['defaultRunConfiguration'])) {
            $this->defaultRunConfiguration = new \Com\Madana\Core\Utils\Remotecontrol\RunConfig($o["defaultRunConfiguration"]);
        }
        if (isset($o['ipfsHash'])) {
            $this->ipfsHash = $o["ipfsHash"];
        }
        $this->packages = array();
        if (isset($o['packages'])) {
            foreach ($o['packages'] as $i => $x) {
                $this->packages[$i] = $x;
            }
        }
        if (isset($o['rootHashOffset'])) {
            $this->rootHashOffset = $o["rootHashOffset"];
        }
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['uuid'])) {
            $this->uuid = $o["uuid"];
        }
        $this->content = array();
        if (isset($o['content'])) {
            foreach ($o['content'] as $i => $x) {
                $this->content[$i] = $x;
            }
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_SocialUserObject
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $image;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $platform;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $ident;

    /**
     * Constructs a MDN_SocialUserObject from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * (no documentation provided)
     *
     * @param string $image
     */
    public function setImage($image)
    {
        $this->image = $image;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->platform;
    }

    /**
     * (no documentation provided)
     *
     * @param string $platform
     */
    public function setPlatform($platform)
    {
        $this->platform = $platform;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getIdent()
    {
        return $this->ident;
    }

    /**
     * (no documentation provided)
     *
     * @param string $ident
     */
    public function setIdent($ident)
    {
        $this->ident = $ident;
    }
    /**
     * Returns the associative array for this MDN_SocialUserObject
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->image) {
            $a["image"] = $this->image;
        }
        if ($this->platform) {
            $a["platform"] = $this->platform;
        }
        if ($this->ident) {
            $a["ident"] = $this->ident;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_SocialUserObject
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_SocialUserObject from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['image'])) {
            $this->image = $o["image"];
        }
        if (isset($o['platform'])) {
            $this->platform = $o["platform"];
        }
        if (isset($o['ident'])) {
            $this->ident = $o["ident"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_Data
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $data;

    /**
     * Constructs a MDN_Data from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * (no documentation provided)
     *
     * @param string $data
     */
    public function setData($data)
    {
        $this->data = $data;
    }
    /**
     * Returns the associative array for this MDN_Data
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->data) {
            $a["data"] = $this->data;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_Data
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_Data from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['data'])) {
            $this->data = $o["data"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class EnvironmentPublishingRequest
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $description;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $ipfsHash;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $size;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $isPublic;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $name;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $uuid;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $content;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $ipfsPrimaryPeer;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $packages;

    /**
     * Constructs a EnvironmentPublishingRequest from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * (no documentation provided)
     *
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getIpfsHash()
    {
        return $this->ipfsHash;
    }

    /**
     * (no documentation provided)
     *
     * @param string $ipfsHash
     */
    public function setIpfsHash($ipfsHash)
    {
        $this->ipfsHash = $ipfsHash;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getSize()
    {
        return $this->size;
    }

    /**
     * (no documentation provided)
     *
     * @param string $size
     */
    public function setSize($size)
    {
        $this->size = $size;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getIsPublic()
    {
        return $this->isPublic;
    }

    /**
     * (no documentation provided)
     *
     * @param string $isPublic
     */
    public function setIsPublic($isPublic)
    {
        $this->isPublic = $isPublic;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * (no documentation provided)
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * (no documentation provided)
     *
     * @param string $uuid
     */
    public function setUuid($uuid)
    {
        $this->uuid = $uuid;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * (no documentation provided)
     *
     * @param string $content
     */
    public function setContent($content)
    {
        $this->content = $content;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getIpfsPrimaryPeer()
    {
        return $this->ipfsPrimaryPeer;
    }

    /**
     * (no documentation provided)
     *
     * @param string $ipfsPrimaryPeer
     */
    public function setIpfsPrimaryPeer($ipfsPrimaryPeer)
    {
        $this->ipfsPrimaryPeer = $ipfsPrimaryPeer;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPackages()
    {
        return $this->packages;
    }

    /**
     * (no documentation provided)
     *
     * @param string $packages
     */
    public function setPackages($packages)
    {
        $this->packages = $packages;
    }
    /**
     * Returns the associative array for this EnvironmentPublishingRequest
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->description) {
            $a["description"] = $this->description;
        }
        if ($this->ipfsHash) {
            $a["ipfsHash"] = $this->ipfsHash;
        }
        if ($this->size) {
            $a["size"] = $this->size;
        }
        if ($this->isPublic) {
            $a["isPublic"] = $this->isPublic;
        }
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->uuid) {
            $a["uuid"] = $this->uuid;
        }
        if ($this->content) {
            $a["content"] = $this->content;
        }
        if ($this->ipfsPrimaryPeer) {
            $a["ipfsPrimaryPeer"] = $this->ipfsPrimaryPeer;
        }
        if ($this->packages) {
            $a["packages"] = $this->packages;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this EnvironmentPublishingRequest
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this EnvironmentPublishingRequest from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['description'])) {
            $this->description = $o["description"];
        }
        if (isset($o['ipfsHash'])) {
            $this->ipfsHash = $o["ipfsHash"];
        }
        if (isset($o['size'])) {
            $this->size = $o["size"];
        }
        if (isset($o['isPublic'])) {
            $this->isPublic = $o["isPublic"];
        }
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['uuid'])) {
            $this->uuid = $o["uuid"];
        }
        if (isset($o['content'])) {
            $this->content = $o["content"];
        }
        if (isset($o['ipfsPrimaryPeer'])) {
            $this->ipfsPrimaryPeer = $o["ipfsPrimaryPeer"];
        }
        if (isset($o['packages'])) {
            $this->packages = $o["packages"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_Token
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $token;

    /**
     * Constructs a MDN_Token from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * (no documentation provided)
     *
     * @param string $token
     */
    public function setToken($token)
    {
        $this->token = $token;
    }
    /**
     * Returns the associative array for this MDN_Token
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->token) {
            $a["token"] = $this->token;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_Token
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_Token from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['token'])) {
            $this->token = $o["token"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_UserProfileImage
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $id;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $image;

    /**
     * Constructs a MDN_UserProfileImage from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * (no documentation provided)
     *
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * (no documentation provided)
     *
     * @param string $image
     */
    public function setImage($image)
    {
        $this->image = $image;
    }
    /**
     * Returns the associative array for this MDN_UserProfileImage
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->id) {
            $a["id"] = $this->id;
        }
        if ($this->image) {
            $a["image"] = $this->image;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_UserProfileImage
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_UserProfileImage from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['id'])) {
            $this->id = $o["id"];
        }
        if (isset($o['image'])) {
            $this->image = $o["image"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_MailAddress
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $mail;

    /**
     * Constructs a MDN_MailAddress from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getMail()
    {
        return $this->mail;
    }

    /**
     * (no documentation provided)
     *
     * @param string $mail
     */
    public function setMail($mail)
    {
        $this->mail = $mail;
    }
    /**
     * Returns the associative array for this MDN_MailAddress
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->mail) {
            $a["mail"] = $this->mail;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_MailAddress
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_MailAddress from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['mail'])) {
            $this->mail = $o["mail"];
        }
    }
}

namespace Com\Madana\Core\Utils\Remotecontrol;

/**
 * (no documentation provided)
 */
class Disk_config
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $roothash;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $disk;

    /**
     * (no documentation provided)
     *
     * @var integer
     */
    private $roothash_offset;

    /**
     * (no documentation provided)
     *
     * @var boolean
     */
    private $readonly;

    /**
     * Constructs a Disk_config from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getRoothash()
    {
        return $this->roothash;
    }

    /**
     * (no documentation provided)
     *
     * @param string $roothash
     */
    public function setRoothash($roothash)
    {
        $this->roothash = $roothash;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDisk()
    {
        return $this->disk;
    }

    /**
     * (no documentation provided)
     *
     * @param string $disk
     */
    public function setDisk($disk)
    {
        $this->disk = $disk;
    }
    /**
     * (no documentation provided)
     *
     * @return integer
     */
    public function getRoothash_offset()
    {
        return $this->roothash_offset;
    }

    /**
     * (no documentation provided)
     *
     * @param integer $roothash_offset
     */
    public function setRoothash_offset($roothash_offset)
    {
        $this->roothash_offset = $roothash_offset;
    }
    /**
     * (no documentation provided)
     *
     * @return boolean
     */
    public function getReadonly()
    {
        return $this->readonly;
    }

    /**
     * (no documentation provided)
     *
     * @param boolean $readonly
     */
    public function setReadonly($readonly)
    {
        $this->readonly = $readonly;
    }
    /**
     * Returns the associative array for this Disk_config
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->roothash) {
            $a["roothash"] = $this->roothash;
        }
        if ($this->disk) {
            $a["disk"] = $this->disk;
        }
        if ($this->roothash_offset) {
            $a["roothash_offset"] = $this->roothash_offset;
        }
        if ($this->readonly) {
            $a["readonly"] = $this->readonly;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Disk_config
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Disk_config from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['roothash'])) {
            $this->roothash = $o["roothash"];
        }
        if (isset($o['disk'])) {
            $this->disk = $o["disk"];
        }
        if (isset($o['roothash_offset'])) {
            $this->roothash_offset = $o["roothash_offset"];
        }
        if (isset($o['readonly'])) {
            $this->readonly = $o["readonly"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class EnclaveRunningAttestation
{

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\EnclaveProcess
     */
    private $enclaveProcess;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\NodeInfo
     */
    private $nodeInfo;

    /**
     * Constructs a EnclaveRunningAttestation from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\EnclaveProcess
     */
    public function getEnclaveProcess()
    {
        return $this->enclaveProcess;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\EnclaveProcess $enclaveProcess
     */
    public function setEnclaveProcess($enclaveProcess)
    {
        $this->enclaveProcess = $enclaveProcess;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\NodeInfo
     */
    public function getNodeInfo()
    {
        return $this->nodeInfo;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\NodeInfo $nodeInfo
     */
    public function setNodeInfo($nodeInfo)
    {
        $this->nodeInfo = $nodeInfo;
    }
    /**
     * Returns the associative array for this EnclaveRunningAttestation
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->enclaveProcess) {
            $a["enclaveProcess"] = $this->enclaveProcess->toArray();
        }
        if ($this->nodeInfo) {
            $a["nodeInfo"] = $this->nodeInfo->toArray();
        }
        return $a;
    }

    /**
     * Returns the JSON string for this EnclaveRunningAttestation
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this EnclaveRunningAttestation from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['enclaveProcess'])) {
            $this->enclaveProcess = new \Com\Madana\Core\Utils\EnclaveProcess($o["enclaveProcess"]);
        }
        if (isset($o['nodeInfo'])) {
            $this->nodeInfo = new \Com\Madana\Core\Utils\NodeInfo($o["nodeInfo"]);
        }
    }
}

namespace Java\Lang;

/**
 * (no documentation provided)
 */
class Process
{

    /**
     * (no documentation provided)
     *
     * @var \Java\Io\InputStream
     */
    private $inputStream;

    /**
     * (no documentation provided)
     *
     * @var boolean
     */
    private $alive;

    /**
     * (no documentation provided)
     *
     * @var \Java\Io\InputStream
     */
    private $errorStream;

    /**
     * (no documentation provided)
     *
     * @var \Java\Io\OutputStream
     */
    private $outputStream;

    /**
     * Constructs a Process from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return \Java\Io\InputStream
     */
    public function getInputStream()
    {
        return $this->inputStream;
    }

    /**
     * (no documentation provided)
     *
     * @param \Java\Io\InputStream $inputStream
     */
    public function setInputStream($inputStream)
    {
        $this->inputStream = $inputStream;
    }
    /**
     * (no documentation provided)
     *
     * @return boolean
     */
    public function getAlive()
    {
        return $this->alive;
    }

    /**
     * (no documentation provided)
     *
     * @param boolean $alive
     */
    public function setAlive($alive)
    {
        $this->alive = $alive;
    }
    /**
     * (no documentation provided)
     *
     * @return \Java\Io\InputStream
     */
    public function getErrorStream()
    {
        return $this->errorStream;
    }

    /**
     * (no documentation provided)
     *
     * @param \Java\Io\InputStream $errorStream
     */
    public function setErrorStream($errorStream)
    {
        $this->errorStream = $errorStream;
    }
    /**
     * (no documentation provided)
     *
     * @return \Java\Io\OutputStream
     */
    public function getOutputStream()
    {
        return $this->outputStream;
    }

    /**
     * (no documentation provided)
     *
     * @param \Java\Io\OutputStream $outputStream
     */
    public function setOutputStream($outputStream)
    {
        $this->outputStream = $outputStream;
    }
    /**
     * Returns the associative array for this Process
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->inputStream) {
            $a["inputStream"] = $this->inputStream->toArray();
        }
        if ($this->alive) {
            $a["alive"] = $this->alive;
        }
        if ($this->errorStream) {
            $a["errorStream"] = $this->errorStream->toArray();
        }
        if ($this->outputStream) {
            $a["outputStream"] = $this->outputStream->toArray();
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Process
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Process from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['inputStream'])) {
            $this->inputStream = new \Java\Io\InputStream($o["inputStream"]);
        }
        if (isset($o['alive'])) {
            $this->alive = $o["alive"];
        }
        if (isset($o['errorStream'])) {
            $this->errorStream = new \Java\Io\InputStream($o["errorStream"]);
        }
        if (isset($o['outputStream'])) {
            $this->outputStream = new \Java\Io\OutputStream($o["outputStream"]);
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_Certificate
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $pem;

    /**
     * Constructs a MDN_Certificate from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPem()
    {
        return $this->pem;
    }

    /**
     * (no documentation provided)
     *
     * @param string $pem
     */
    public function setPem($pem)
    {
        $this->pem = $pem;
    }
    /**
     * Returns the associative array for this MDN_Certificate
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->pem) {
            $a["pem"] = $this->pem;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_Certificate
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_Certificate from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['pem'])) {
            $this->pem = $o["pem"];
        }
    }
}

namespace Com\Madana\Core\Utils\Enclave;

/**
 * (no documentation provided)
 */
class EnclaveRunRequest
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $environmentUUID;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $enclaveExecutionType;

    /**
     * Constructs a EnclaveRunRequest from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getEnvironmentUUID()
    {
        return $this->environmentUUID;
    }

    /**
     * (no documentation provided)
     *
     * @param string $environmentUUID
     */
    public function setEnvironmentUUID($environmentUUID)
    {
        $this->environmentUUID = $environmentUUID;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getEnclaveExecutionType()
    {
        return $this->enclaveExecutionType;
    }

    /**
     * (no documentation provided)
     *
     * @param string $enclaveExecutionType
     */
    public function setEnclaveExecutionType($enclaveExecutionType)
    {
        $this->enclaveExecutionType = $enclaveExecutionType;
    }
    /**
     * Returns the associative array for this EnclaveRunRequest
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->environmentUUID) {
            $a["environmentUUID"] = $this->environmentUUID;
        }
        if ($this->enclaveExecutionType) {
            $a["enclaveExecutionType"] = $this->enclaveExecutionType;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this EnclaveRunRequest
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this EnclaveRunRequest from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['environmentUUID'])) {
            $this->environmentUUID = $o["environmentUUID"];
        }
        if (isset($o['enclaveExecutionType'])) {
            $this->enclaveExecutionType = $o["enclaveExecutionType"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class SignedData
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $fingerpint;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $signature;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $data;

    /**
     * Constructs a SignedData from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getFingerpint()
    {
        return $this->fingerpint;
    }

    /**
     * (no documentation provided)
     *
     * @param string $fingerpint
     */
    public function setFingerpint($fingerpint)
    {
        $this->fingerpint = $fingerpint;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * (no documentation provided)
     *
     * @param string $signature
     */
    public function setSignature($signature)
    {
        $this->signature = $signature;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * (no documentation provided)
     *
     * @param string $data
     */
    public function setData($data)
    {
        $this->data = $data;
    }
    /**
     * Returns the associative array for this SignedData
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->fingerpint) {
            $a["fingerpint"] = $this->fingerpint;
        }
        if ($this->signature) {
            $a["signature"] = $this->signature;
        }
        if ($this->data) {
            $a["data"] = $this->data;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this SignedData
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this SignedData from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['fingerpint'])) {
            $this->fingerpint = $o["fingerpint"];
        }
        if (isset($o['signature'])) {
            $this->signature = $o["signature"];
        }
        if (isset($o['data'])) {
            $this->data = $o["data"];
        }
    }
}

namespace Java\Io;

/**
 * (no documentation provided)
 */
class InputStream
{

    /**
     * Constructs a InputStream from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * Returns the associative array for this InputStream
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        return $a;
    }

    /**
     * Returns the JSON string for this InputStream
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this InputStream from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
    }
}

namespace Com\Madana\Core\Utils\Remotecontrol;

/**
 * (no documentation provided)
 */
class RunConfig
{

    /**
     * (no documentation provided)
     *
     * @var array
     */
    private $environment;

    /**
     * (no documentation provided)
     *
     * @var string[]
     */
    private $args;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $run;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\Remotecontrol\Disk_config[]
     */
    private $disk_config;

    /**
     * Constructs a RunConfig from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return array
     */
    public function getEnvironment()
    {
        return $this->environment;
    }

    /**
     * (no documentation provided)
     *
     * @param array $environment
     */
    public function setEnvironment($environment)
    {
        $this->environment = $environment;
    }
    /**
     * (no documentation provided)
     *
     * @return string[]
     */
    public function getArgs()
    {
        return $this->args;
    }

    /**
     * (no documentation provided)
     *
     * @param string[] $args
     */
    public function setArgs($args)
    {
        $this->args = $args;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getRun()
    {
        return $this->run;
    }

    /**
     * (no documentation provided)
     *
     * @param string $run
     */
    public function setRun($run)
    {
        $this->run = $run;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\Remotecontrol\Disk_config[]
     */
    public function getDisk_config()
    {
        return $this->disk_config;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\Remotecontrol\Disk_config[] $disk_config
     */
    public function setDisk_config($disk_config)
    {
        $this->disk_config = $disk_config;
    }
    /**
     * Returns the associative array for this RunConfig
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->environment) {
            $a["environment"] = $this->environment;
        }
        if ($this->args) {
            $ab = array();
            foreach ($this->args as $i => $x) {
                $ab[$i] = $x;
            }
            $a['args'] = $ab;
        }
        if ($this->run) {
            $a["run"] = $this->run;
        }
        if ($this->disk_config) {
            $ab = array();
            foreach ($this->disk_config as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['disk_config'] = $ab;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this RunConfig
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this RunConfig from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['environment'])) {
            $this->environment = $o["environment"];
        }
        $this->args = array();
        if (isset($o['args'])) {
            foreach ($o['args'] as $i => $x) {
                $this->args[$i] = $x;
            }
        }
        if (isset($o['run'])) {
            $this->run = $o["run"];
        }
        $this->disk_config = array();
        if (isset($o['disk_config'])) {
            foreach ($o['disk_config'] as $i => $x) {
                $this->disk_config[$i] = new \Com\Madana\Core\Utils\Remotecontrol\Disk_config($x);
            }
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_PasswordReset
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $token;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $mail;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $password;

    /**
     * Constructs a MDN_PasswordReset from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * (no documentation provided)
     *
     * @param string $token
     */
    public function setToken($token)
    {
        $this->token = $token;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getMail()
    {
        return $this->mail;
    }

    /**
     * (no documentation provided)
     *
     * @param string $mail
     */
    public function setMail($mail)
    {
        $this->mail = $mail;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * (no documentation provided)
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = $password;
    }
    /**
     * Returns the associative array for this MDN_PasswordReset
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->token) {
            $a["token"] = $this->token;
        }
        if ($this->mail) {
            $a["mail"] = $this->mail;
        }
        if ($this->password) {
            $a["password"] = $this->password;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_PasswordReset
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_PasswordReset from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['token'])) {
            $this->token = $o["token"];
        }
        if (isset($o['mail'])) {
            $this->mail = $o["mail"];
        }
        if (isset($o['password'])) {
            $this->password = $o["password"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class EnclaveProcess
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $remoteControlServer;

    /**
     * (no documentation provided)
     *
     * @var \Java\Lang\Process
     */
    private $process;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $signerIdent;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $internalAttesationServer;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $attestationServer;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $internalRemoteControlServer;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\WireguardInterface
     */
    private $wgInterface;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $endingTime;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\Environment
     */
    private $environment;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $internalIdent;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $consoleOutput;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $wireguardPublicKey;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $startupTime;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $enclaveIdent;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $status;

    /**
     * Constructs a EnclaveProcess from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getRemoteControlServer()
    {
        return $this->remoteControlServer;
    }

    /**
     * (no documentation provided)
     *
     * @param string $remoteControlServer
     */
    public function setRemoteControlServer($remoteControlServer)
    {
        $this->remoteControlServer = $remoteControlServer;
    }
    /**
     * (no documentation provided)
     *
     * @return \Java\Lang\Process
     */
    public function getProcess()
    {
        return $this->process;
    }

    /**
     * (no documentation provided)
     *
     * @param \Java\Lang\Process $process
     */
    public function setProcess($process)
    {
        $this->process = $process;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getSignerIdent()
    {
        return $this->signerIdent;
    }

    /**
     * (no documentation provided)
     *
     * @param string $signerIdent
     */
    public function setSignerIdent($signerIdent)
    {
        $this->signerIdent = $signerIdent;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getInternalAttesationServer()
    {
        return $this->internalAttesationServer;
    }

    /**
     * (no documentation provided)
     *
     * @param string $internalAttesationServer
     */
    public function setInternalAttesationServer($internalAttesationServer)
    {
        $this->internalAttesationServer = $internalAttesationServer;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getAttestationServer()
    {
        return $this->attestationServer;
    }

    /**
     * (no documentation provided)
     *
     * @param string $attestationServer
     */
    public function setAttestationServer($attestationServer)
    {
        $this->attestationServer = $attestationServer;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getInternalRemoteControlServer()
    {
        return $this->internalRemoteControlServer;
    }

    /**
     * (no documentation provided)
     *
     * @param string $internalRemoteControlServer
     */
    public function setInternalRemoteControlServer($internalRemoteControlServer)
    {
        $this->internalRemoteControlServer = $internalRemoteControlServer;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\WireguardInterface
     */
    public function getWgInterface()
    {
        return $this->wgInterface;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\WireguardInterface $wgInterface
     */
    public function setWgInterface($wgInterface)
    {
        $this->wgInterface = $wgInterface;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getEndingTime()
    {
        return $this->endingTime;
    }

    /**
     * (no documentation provided)
     *
     * @param string $endingTime
     */
    public function setEndingTime($endingTime)
    {
        $this->endingTime = $endingTime;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\Environment
     */
    public function getEnvironment()
    {
        return $this->environment;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\Environment $environment
     */
    public function setEnvironment($environment)
    {
        $this->environment = $environment;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getInternalIdent()
    {
        return $this->internalIdent;
    }

    /**
     * (no documentation provided)
     *
     * @param string $internalIdent
     */
    public function setInternalIdent($internalIdent)
    {
        $this->internalIdent = $internalIdent;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getConsoleOutput()
    {
        return $this->consoleOutput;
    }

    /**
     * (no documentation provided)
     *
     * @param string $consoleOutput
     */
    public function setConsoleOutput($consoleOutput)
    {
        $this->consoleOutput = $consoleOutput;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getWireguardPublicKey()
    {
        return $this->wireguardPublicKey;
    }

    /**
     * (no documentation provided)
     *
     * @param string $wireguardPublicKey
     */
    public function setWireguardPublicKey($wireguardPublicKey)
    {
        $this->wireguardPublicKey = $wireguardPublicKey;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getStartupTime()
    {
        return $this->startupTime;
    }

    /**
     * (no documentation provided)
     *
     * @param string $startupTime
     */
    public function setStartupTime($startupTime)
    {
        $this->startupTime = $startupTime;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getEnclaveIdent()
    {
        return $this->enclaveIdent;
    }

    /**
     * (no documentation provided)
     *
     * @param string $enclaveIdent
     */
    public function setEnclaveIdent($enclaveIdent)
    {
        $this->enclaveIdent = $enclaveIdent;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * (no documentation provided)
     *
     * @param string $status
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }
    /**
     * Returns the associative array for this EnclaveProcess
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->remoteControlServer) {
            $a["remoteControlServer"] = $this->remoteControlServer;
        }
        if ($this->process) {
            $a["process"] = $this->process->toArray();
        }
        if ($this->signerIdent) {
            $a["signerIdent"] = $this->signerIdent;
        }
        if ($this->internalAttesationServer) {
            $a["internalAttesationServer"] = $this->internalAttesationServer;
        }
        if ($this->attestationServer) {
            $a["attestationServer"] = $this->attestationServer;
        }
        if ($this->internalRemoteControlServer) {
            $a["internalRemoteControlServer"] = $this->internalRemoteControlServer;
        }
        if ($this->wgInterface) {
            $a["wgInterface"] = $this->wgInterface->toArray();
        }
        if ($this->endingTime) {
            $a["endingTime"] = $this->endingTime;
        }
        if ($this->environment) {
            $a["environment"] = $this->environment->toArray();
        }
        if ($this->internalIdent) {
            $a["internalIdent"] = $this->internalIdent;
        }
        if ($this->consoleOutput) {
            $a["consoleOutput"] = $this->consoleOutput;
        }
        if ($this->wireguardPublicKey) {
            $a["wireguardPublicKey"] = $this->wireguardPublicKey;
        }
        if ($this->startupTime) {
            $a["startupTime"] = $this->startupTime;
        }
        if ($this->enclaveIdent) {
            $a["enclaveIdent"] = $this->enclaveIdent;
        }
        if ($this->status) {
            $a["status"] = $this->status;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this EnclaveProcess
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this EnclaveProcess from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['remoteControlServer'])) {
            $this->remoteControlServer = $o["remoteControlServer"];
        }
        if (isset($o['process'])) {
            $this->process = new \Java\Lang\Process($o["process"]);
        }
        if (isset($o['signerIdent'])) {
            $this->signerIdent = $o["signerIdent"];
        }
        if (isset($o['internalAttesationServer'])) {
            $this->internalAttesationServer = $o["internalAttesationServer"];
        }
        if (isset($o['attestationServer'])) {
            $this->attestationServer = $o["attestationServer"];
        }
        if (isset($o['internalRemoteControlServer'])) {
            $this->internalRemoteControlServer = $o["internalRemoteControlServer"];
        }
        if (isset($o['wgInterface'])) {
            $this->wgInterface = new \Com\Madana\Core\Utils\WireguardInterface($o["wgInterface"]);
        }
        if (isset($o['endingTime'])) {
            $this->endingTime = $o["endingTime"];
        }
        if (isset($o['environment'])) {
            $this->environment = new \Com\Madana\Core\Utils\Environment($o["environment"]);
        }
        if (isset($o['internalIdent'])) {
            $this->internalIdent = $o["internalIdent"];
        }
        if (isset($o['consoleOutput'])) {
            $this->consoleOutput = $o["consoleOutput"];
        }
        if (isset($o['wireguardPublicKey'])) {
            $this->wireguardPublicKey = $o["wireguardPublicKey"];
        }
        if (isset($o['startupTime'])) {
            $this->startupTime = $o["startupTime"];
        }
        if (isset($o['enclaveIdent'])) {
            $this->enclaveIdent = $o["enclaveIdent"];
        }
        if (isset($o['status'])) {
            $this->status = $o["status"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_Setting
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $name;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $id;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $description;

    /**
     * Constructs a MDN_Setting from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * (no documentation provided)
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * (no documentation provided)
     *
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * (no documentation provided)
     *
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    /**
     * Returns the associative array for this MDN_Setting
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->id) {
            $a["id"] = $this->id;
        }
        if ($this->description) {
            $a["description"] = $this->description;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_Setting
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_Setting from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['id'])) {
            $this->id = $o["id"];
        }
        if (isset($o['description'])) {
            $this->description = $o["description"];
        }
    }
}

namespace Java\Io;

/**
 * (no documentation provided)
 */
class OutputStream
{

    /**
     * Constructs a OutputStream from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * Returns the associative array for this OutputStream
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        return $a;
    }

    /**
     * Returns the JSON string for this OutputStream
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this OutputStream from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class IPFSSystemInfo
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $swarmConnection;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $publicKey;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $protocolVersion;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $agentVersion;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $id;

    /**
     * Constructs a IPFSSystemInfo from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getSwarmConnection()
    {
        return $this->swarmConnection;
    }

    /**
     * (no documentation provided)
     *
     * @param string $swarmConnection
     */
    public function setSwarmConnection($swarmConnection)
    {
        $this->swarmConnection = $swarmConnection;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPublicKey()
    {
        return $this->publicKey;
    }

    /**
     * (no documentation provided)
     *
     * @param string $publicKey
     */
    public function setPublicKey($publicKey)
    {
        $this->publicKey = $publicKey;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getProtocolVersion()
    {
        return $this->protocolVersion;
    }

    /**
     * (no documentation provided)
     *
     * @param string $protocolVersion
     */
    public function setProtocolVersion($protocolVersion)
    {
        $this->protocolVersion = $protocolVersion;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getAgentVersion()
    {
        return $this->agentVersion;
    }

    /**
     * (no documentation provided)
     *
     * @param string $agentVersion
     */
    public function setAgentVersion($agentVersion)
    {
        $this->agentVersion = $agentVersion;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * (no documentation provided)
     *
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    /**
     * Returns the associative array for this IPFSSystemInfo
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->swarmConnection) {
            $a["swarmConnection"] = $this->swarmConnection;
        }
        if ($this->publicKey) {
            $a["publicKey"] = $this->publicKey;
        }
        if ($this->protocolVersion) {
            $a["protocolVersion"] = $this->protocolVersion;
        }
        if ($this->agentVersion) {
            $a["agentVersion"] = $this->agentVersion;
        }
        if ($this->id) {
            $a["id"] = $this->id;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this IPFSSystemInfo
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this IPFSSystemInfo from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['swarmConnection'])) {
            $this->swarmConnection = $o["swarmConnection"];
        }
        if (isset($o['publicKey'])) {
            $this->publicKey = $o["publicKey"];
        }
        if (isset($o['protocolVersion'])) {
            $this->protocolVersion = $o["protocolVersion"];
        }
        if (isset($o['agentVersion'])) {
            $this->agentVersion = $o["agentVersion"];
        }
        if (isset($o['id'])) {
            $this->id = $o["id"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_OAuthToken
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $verifier;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $token;

    /**
     * Constructs a MDN_OAuthToken from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getVerifier()
    {
        return $this->verifier;
    }

    /**
     * (no documentation provided)
     *
     * @param string $verifier
     */
    public function setVerifier($verifier)
    {
        $this->verifier = $verifier;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * (no documentation provided)
     *
     * @param string $token
     */
    public function setToken($token)
    {
        $this->token = $token;
    }
    /**
     * Returns the associative array for this MDN_OAuthToken
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->verifier) {
            $a["verifier"] = $this->verifier;
        }
        if ($this->token) {
            $a["token"] = $this->token;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_OAuthToken
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_OAuthToken from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['verifier'])) {
            $this->verifier = $o["verifier"];
        }
        if (isset($o['token'])) {
            $this->token = $o["token"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_UserCredentials
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $username;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $password;

    /**
     * Constructs a MDN_UserCredentials from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * (no documentation provided)
     *
     * @param string $username
     */
    public function setUsername($username)
    {
        $this->username = $username;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * (no documentation provided)
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = $password;
    }
    /**
     * Returns the associative array for this MDN_UserCredentials
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->username) {
            $a["username"] = $this->username;
        }
        if ($this->password) {
            $a["password"] = $this->password;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_UserCredentials
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_UserCredentials from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['username'])) {
            $this->username = $o["username"];
        }
        if (isset($o['password'])) {
            $this->password = $o["password"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class NetworkInterface
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $name;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $address;

    /**
     * Constructs a NetworkInterface from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * (no documentation provided)
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * (no documentation provided)
     *
     * @param string $address
     */
    public function setAddress($address)
    {
        $this->address = $address;
    }
    /**
     * Returns the associative array for this NetworkInterface
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->address) {
            $a["address"] = $this->address;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this NetworkInterface
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this NetworkInterface from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['address'])) {
            $this->address = $o["address"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_A_UserObject
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $created;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $activated;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $lastActive;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $image;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $userName;

    /**
     * Constructs a MDN_A_UserObject from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * (no documentation provided)
     *
     * @param string $created
     */
    public function setCreated($created)
    {
        $this->created = $created;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getActivated()
    {
        return $this->activated;
    }

    /**
     * (no documentation provided)
     *
     * @param string $activated
     */
    public function setActivated($activated)
    {
        $this->activated = $activated;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getLastActive()
    {
        return $this->lastActive;
    }

    /**
     * (no documentation provided)
     *
     * @param string $lastActive
     */
    public function setLastActive($lastActive)
    {
        $this->lastActive = $lastActive;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * (no documentation provided)
     *
     * @param string $image
     */
    public function setImage($image)
    {
        $this->image = $image;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->userName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $userName
     */
    public function setUserName($userName)
    {
        $this->userName = $userName;
    }
    /**
     * Returns the associative array for this MDN_A_UserObject
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->created) {
            $a["created"] = $this->created;
        }
        if ($this->activated) {
            $a["activated"] = $this->activated;
        }
        if ($this->lastActive) {
            $a["lastActive"] = $this->lastActive;
        }
        if ($this->image) {
            $a["image"] = $this->image;
        }
        if ($this->userName) {
            $a["userName"] = $this->userName;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this MDN_A_UserObject
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this MDN_A_UserObject from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['created'])) {
            $this->created = $o["created"];
        }
        if (isset($o['activated'])) {
            $this->activated = $o["activated"];
        }
        if (isset($o['lastActive'])) {
            $this->lastActive = $o["lastActive"];
        }
        if (isset($o['image'])) {
            $this->image = $o["image"];
        }
        if (isset($o['userName'])) {
            $this->userName = $o["userName"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class NodeInfo
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $cpuModel;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $hardwareFirmware;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $cpuFamily;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $memory;

    /**
     * (no documentation provided)
     *
     * @var integer
     */
    private $cpuLogicalCount;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $hardwareBaseboard;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $operatingSystem;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $publicKey;

    /**
     * (no documentation provided)
     *
     * @var string[]
     */
    private $processors;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Core\Utils\IPFSSystemInfo
     */
    private $ipfsInfo;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $cpuFrequency;

    /**
     * (no documentation provided)
     *
     * @var integer
     */
    private $operatingSystemUptime;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $owner;

    /**
     * (no documentation provided)
     *
     * @var integer
     */
    private $cpuPhysicalCores;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $status;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $connectionURL;

    /**
     * Constructs a NodeInfo from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getCpuModel()
    {
        return $this->cpuModel;
    }

    /**
     * (no documentation provided)
     *
     * @param string $cpuModel
     */
    public function setCpuModel($cpuModel)
    {
        $this->cpuModel = $cpuModel;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getHardwareFirmware()
    {
        return $this->hardwareFirmware;
    }

    /**
     * (no documentation provided)
     *
     * @param string $hardwareFirmware
     */
    public function setHardwareFirmware($hardwareFirmware)
    {
        $this->hardwareFirmware = $hardwareFirmware;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getCpuFamily()
    {
        return $this->cpuFamily;
    }

    /**
     * (no documentation provided)
     *
     * @param string $cpuFamily
     */
    public function setCpuFamily($cpuFamily)
    {
        $this->cpuFamily = $cpuFamily;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getMemory()
    {
        return $this->memory;
    }

    /**
     * (no documentation provided)
     *
     * @param string $memory
     */
    public function setMemory($memory)
    {
        $this->memory = $memory;
    }
    /**
     * (no documentation provided)
     *
     * @return integer
     */
    public function getCpuLogicalCount()
    {
        return $this->cpuLogicalCount;
    }

    /**
     * (no documentation provided)
     *
     * @param integer $cpuLogicalCount
     */
    public function setCpuLogicalCount($cpuLogicalCount)
    {
        $this->cpuLogicalCount = $cpuLogicalCount;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getHardwareBaseboard()
    {
        return $this->hardwareBaseboard;
    }

    /**
     * (no documentation provided)
     *
     * @param string $hardwareBaseboard
     */
    public function setHardwareBaseboard($hardwareBaseboard)
    {
        $this->hardwareBaseboard = $hardwareBaseboard;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getOperatingSystem()
    {
        return $this->operatingSystem;
    }

    /**
     * (no documentation provided)
     *
     * @param string $operatingSystem
     */
    public function setOperatingSystem($operatingSystem)
    {
        $this->operatingSystem = $operatingSystem;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPublicKey()
    {
        return $this->publicKey;
    }

    /**
     * (no documentation provided)
     *
     * @param string $publicKey
     */
    public function setPublicKey($publicKey)
    {
        $this->publicKey = $publicKey;
    }
    /**
     * (no documentation provided)
     *
     * @return string[]
     */
    public function getProcessors()
    {
        return $this->processors;
    }

    /**
     * (no documentation provided)
     *
     * @param string[] $processors
     */
    public function setProcessors($processors)
    {
        $this->processors = $processors;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Core\Utils\IPFSSystemInfo
     */
    public function getIpfsInfo()
    {
        return $this->ipfsInfo;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Core\Utils\IPFSSystemInfo $ipfsInfo
     */
    public function setIpfsInfo($ipfsInfo)
    {
        $this->ipfsInfo = $ipfsInfo;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getCpuFrequency()
    {
        return $this->cpuFrequency;
    }

    /**
     * (no documentation provided)
     *
     * @param string $cpuFrequency
     */
    public function setCpuFrequency($cpuFrequency)
    {
        $this->cpuFrequency = $cpuFrequency;
    }
    /**
     * (no documentation provided)
     *
     * @return integer
     */
    public function getOperatingSystemUptime()
    {
        return $this->operatingSystemUptime;
    }

    /**
     * (no documentation provided)
     *
     * @param integer $operatingSystemUptime
     */
    public function setOperatingSystemUptime($operatingSystemUptime)
    {
        $this->operatingSystemUptime = $operatingSystemUptime;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->owner;
    }

    /**
     * (no documentation provided)
     *
     * @param string $owner
     */
    public function setOwner($owner)
    {
        $this->owner = $owner;
    }
    /**
     * (no documentation provided)
     *
     * @return integer
     */
    public function getCpuPhysicalCores()
    {
        return $this->cpuPhysicalCores;
    }

    /**
     * (no documentation provided)
     *
     * @param integer $cpuPhysicalCores
     */
    public function setCpuPhysicalCores($cpuPhysicalCores)
    {
        $this->cpuPhysicalCores = $cpuPhysicalCores;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * (no documentation provided)
     *
     * @param string $status
     */
    public function setStatus($status)
    {
        $this->status = $status;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getConnectionURL()
    {
        return $this->connectionURL;
    }

    /**
     * (no documentation provided)
     *
     * @param string $connectionURL
     */
    public function setConnectionURL($connectionURL)
    {
        $this->connectionURL = $connectionURL;
    }
    /**
     * Returns the associative array for this NodeInfo
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->cpuModel) {
            $a["cpuModel"] = $this->cpuModel;
        }
        if ($this->hardwareFirmware) {
            $a["hardwareFirmware"] = $this->hardwareFirmware;
        }
        if ($this->cpuFamily) {
            $a["cpuFamily"] = $this->cpuFamily;
        }
        if ($this->memory) {
            $a["memory"] = $this->memory;
        }
        if ($this->cpuLogicalCount) {
            $a["cpuLogicalCount"] = $this->cpuLogicalCount;
        }
        if ($this->hardwareBaseboard) {
            $a["hardwareBaseboard"] = $this->hardwareBaseboard;
        }
        if ($this->operatingSystem) {
            $a["operatingSystem"] = $this->operatingSystem;
        }
        if ($this->publicKey) {
            $a["publicKey"] = $this->publicKey;
        }
        if ($this->processors) {
            $ab = array();
            foreach ($this->processors as $i => $x) {
                $ab[$i] = $x;
            }
            $a['processors'] = $ab;
        }
        if ($this->ipfsInfo) {
            $a["ipfsInfo"] = $this->ipfsInfo->toArray();
        }
        if ($this->cpuFrequency) {
            $a["cpuFrequency"] = $this->cpuFrequency;
        }
        if ($this->operatingSystemUptime) {
            $a["operatingSystemUptime"] = $this->operatingSystemUptime;
        }
        if ($this->owner) {
            $a["owner"] = $this->owner;
        }
        if ($this->cpuPhysicalCores) {
            $a["cpuPhysicalCores"] = $this->cpuPhysicalCores;
        }
        if ($this->status) {
            $a["status"] = $this->status;
        }
        if ($this->connectionURL) {
            $a["connectionURL"] = $this->connectionURL;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this NodeInfo
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this NodeInfo from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['cpuModel'])) {
            $this->cpuModel = $o["cpuModel"];
        }
        if (isset($o['hardwareFirmware'])) {
            $this->hardwareFirmware = $o["hardwareFirmware"];
        }
        if (isset($o['cpuFamily'])) {
            $this->cpuFamily = $o["cpuFamily"];
        }
        if (isset($o['memory'])) {
            $this->memory = $o["memory"];
        }
        if (isset($o['cpuLogicalCount'])) {
            $this->cpuLogicalCount = $o["cpuLogicalCount"];
        }
        if (isset($o['hardwareBaseboard'])) {
            $this->hardwareBaseboard = $o["hardwareBaseboard"];
        }
        if (isset($o['operatingSystem'])) {
            $this->operatingSystem = $o["operatingSystem"];
        }
        if (isset($o['publicKey'])) {
            $this->publicKey = $o["publicKey"];
        }
        $this->processors = array();
        if (isset($o['processors'])) {
            foreach ($o['processors'] as $i => $x) {
                $this->processors[$i] = $x;
            }
        }
        if (isset($o['ipfsInfo'])) {
            $this->ipfsInfo = new \Com\Madana\Core\Utils\IPFSSystemInfo($o["ipfsInfo"]);
        }
        if (isset($o['cpuFrequency'])) {
            $this->cpuFrequency = $o["cpuFrequency"];
        }
        if (isset($o['operatingSystemUptime'])) {
            $this->operatingSystemUptime = $o["operatingSystemUptime"];
        }
        if (isset($o['owner'])) {
            $this->owner = $o["owner"];
        }
        if (isset($o['cpuPhysicalCores'])) {
            $this->cpuPhysicalCores = $o["cpuPhysicalCores"];
        }
        if (isset($o['status'])) {
            $this->status = $o["status"];
        }
        if (isset($o['connectionURL'])) {
            $this->connectionURL = $o["connectionURL"];
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class WireguardInterface extends \Com\Madana\Core\Utils\NetworkInterface
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $port;

    /**
     * Constructs a WireguardInterface from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * (no documentation provided)
     *
     * @param string $port
     */
    public function setPort($port)
    {
        $this->port = $port;
    }
    /**
     * Returns the associative array for this WireguardInterface
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->port) {
            $a["port"] = $this->port;
        }
        return $a;
    }


    /**
     * Initializes this WireguardInterface from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['port'])) {
            $this->port = $o["port"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_User extends \Com\Madana\Common\Datastructures\MDN_A_UserObject
{

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Common\Datastructures\MDN_SocialUserObject[]
     */
    private $socialAccounts;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $firstName;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Common\Datastructures\MDN_UserSetting[]
     */
    private $settings;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $guid;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $lastName;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $mail;

    /**
     * (no documentation provided)
     *
     * @var \Com\Madana\Common\Datastructures\MDN_UserCredentials
     */
    private $credentials;

    /**
     * Constructs a MDN_User from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Common\Datastructures\MDN_SocialUserObject[]
     */
    public function getSocialAccounts()
    {
        return $this->socialAccounts;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Common\Datastructures\MDN_SocialUserObject[] $socialAccounts
     */
    public function setSocialAccounts($socialAccounts)
    {
        $this->socialAccounts = $socialAccounts;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $firstName
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Common\Datastructures\MDN_UserSetting[]
     */
    public function getSettings()
    {
        return $this->settings;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Common\Datastructures\MDN_UserSetting[] $settings
     */
    public function setSettings($settings)
    {
        $this->settings = $settings;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getGuid()
    {
        return $this->guid;
    }

    /**
     * (no documentation provided)
     *
     * @param string $guid
     */
    public function setGuid($guid)
    {
        $this->guid = $guid;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $lastName
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getMail()
    {
        return $this->mail;
    }

    /**
     * (no documentation provided)
     *
     * @param string $mail
     */
    public function setMail($mail)
    {
        $this->mail = $mail;
    }
    /**
     * (no documentation provided)
     *
     * @return \Com\Madana\Common\Datastructures\MDN_UserCredentials
     */
    public function getCredentials()
    {
        return $this->credentials;
    }

    /**
     * (no documentation provided)
     *
     * @param \Com\Madana\Common\Datastructures\MDN_UserCredentials $credentials
     */
    public function setCredentials($credentials)
    {
        $this->credentials = $credentials;
    }
    /**
     * Returns the associative array for this MDN_User
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->socialAccounts) {
            $ab = array();
            foreach ($this->socialAccounts as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['socialAccounts'] = $ab;
        }
        if ($this->firstName) {
            $a["firstName"] = $this->firstName;
        }
        if ($this->settings) {
            $ab = array();
            foreach ($this->settings as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['settings'] = $ab;
        }
        if ($this->guid) {
            $a["guid"] = $this->guid;
        }
        if ($this->lastName) {
            $a["lastName"] = $this->lastName;
        }
        if ($this->mail) {
            $a["mail"] = $this->mail;
        }
        if ($this->credentials) {
            $a["credentials"] = $this->credentials->toArray();
        }
        return $a;
    }


    /**
     * Initializes this MDN_User from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        $this->socialAccounts = array();
        if (isset($o['socialAccounts'])) {
            foreach ($o['socialAccounts'] as $i => $x) {
                $this->socialAccounts[$i] = new \Com\Madana\Common\Datastructures\MDN_SocialUserObject($x);
            }
        }
        if (isset($o['firstName'])) {
            $this->firstName = $o["firstName"];
        }
        $this->settings = array();
        if (isset($o['settings'])) {
            foreach ($o['settings'] as $i => $x) {
                $this->settings[$i] = new \Com\Madana\Common\Datastructures\MDN_UserSetting($x);
            }
        }
        if (isset($o['guid'])) {
            $this->guid = $o["guid"];
        }
        if (isset($o['lastName'])) {
            $this->lastName = $o["lastName"];
        }
        if (isset($o['mail'])) {
            $this->mail = $o["mail"];
        }
        if (isset($o['credentials'])) {
            $this->credentials = new \Com\Madana\Common\Datastructures\MDN_UserCredentials($o["credentials"]);
        }
    }
}

namespace Com\Madana\Core\Utils;

/**
 * (no documentation provided)
 */
class EnclaveRunningAttestationApproval extends \Com\Madana\Core\Utils\EnclaveRunningAttestation
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $approved;

    /**
     * Constructs a EnclaveRunningAttestationApproval from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getApproved()
    {
        return $this->approved;
    }

    /**
     * (no documentation provided)
     *
     * @param string $approved
     */
    public function setApproved($approved)
    {
        $this->approved = $approved;
    }
    /**
     * Returns the associative array for this EnclaveRunningAttestationApproval
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->approved) {
            $a["approved"] = $this->approved;
        }
        return $a;
    }


    /**
     * Initializes this EnclaveRunningAttestationApproval from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['approved'])) {
            $this->approved = $o["approved"];
        }
    }
}

namespace Com\Madana\Common\Datastructures;

/**
 * (no documentation provided)
 */
class MDN_UserSetting extends \Com\Madana\Common\Datastructures\MDN_Setting
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $value;

    /**
     * Constructs a MDN_UserSetting from a (parsed) JSON hash
     *
     * @param mixed $o JSON array.
     */
    public function __construct($o = null)
    {
        $this->initFromArray($o);
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * (no documentation provided)
     *
     * @param string $value
     */
    public function setValue($value)
    {
        $this->value = $value;
    }
    /**
     * Returns the associative array for this MDN_UserSetting
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->value) {
            $a["value"] = $this->value;
        }
        return $a;
    }


    /**
     * Initializes this MDN_UserSetting from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['value'])) {
            $this->value = $o["value"];
        }
    }
}
